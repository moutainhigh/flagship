<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hzcf.flagship.dao.RiskSeparateMapper" >
  <resultMap id="BaseResultMap" type="com.hzcf.flagship.model.RiskSeparate" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="value" property="value" jdbcType="INTEGER" />
    <result column="creator" property="creator" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, value, creator, create_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.hzcf.flagship.model.RiskSeparateExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from f_risk_separate
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from f_risk_separate
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from f_risk_separate
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.hzcf.flagship.model.RiskSeparateExample" >
    delete from f_risk_separate
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hzcf.flagship.model.RiskSeparate" >
    insert into f_risk_separate (id, value, creator, 
      create_time)
    values (#{id,jdbcType=BIGINT}, #{value,jdbcType=INTEGER}, #{creator,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.hzcf.flagship.model.RiskSeparate" >
    insert into f_risk_separate
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="value != null" >
        value,
      </if>
      <if test="creator != null" >
        creator,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="value != null" >
        #{value,jdbcType=INTEGER},
      </if>
      <if test="creator != null" >
        #{creator,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hzcf.flagship.model.RiskSeparateExample" resultType="java.lang.Integer" >
    select count(*) from f_risk_separate
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update f_risk_separate
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.value != null" >
        value = #{record.value,jdbcType=INTEGER},
      </if>
      <if test="record.creator != null" >
        creator = #{record.creator,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update f_risk_separate
    set id = #{record.id,jdbcType=BIGINT},
      value = #{record.value,jdbcType=INTEGER},
      creator = #{record.creator,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hzcf.flagship.model.RiskSeparate" >
    update f_risk_separate
    <set >
      <if test="value != null" >
        value = #{value,jdbcType=INTEGER},
      </if>
      <if test="creator != null" >
        creator = #{creator,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hzcf.flagship.model.RiskSeparate" >
    update f_risk_separate
    set value = #{value,jdbcType=INTEGER},
      creator = #{creator,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <!-- 查找最新的贷后分割点 -->
  <select id="findSeparate" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
    from f_risk_separate
    ORDER BY
	create_time DESC LIMIT 1
  </select>
   <!-- 查找最新的贷后分割点app -->
  <select id="selectSeparate" resultType="map" parameterType="String">
  <![CDATA[  
  SELECT
            CONCAT(a.value,'期') separate
        FROM
            (
                SELECT
                    value,
                    create_time
                FROM
                    f_risk_separate
                ORDER BY
                    create_time DESC
            ) a
        JOIN (
            SELECT
                value,create_time create_time_first
            FROM
                f_risk_separate
            ORDER BY create_time 
            LIMIT 1
        ) c 
        WHERE
            create_time < DATE_ADD(#{days}, INTERVAL 1 DAY)
        OR create_time = create_time_first
        ORDER BY
            create_time DESC
        LIMIT 1
        ]]>
  </select>
  
</mapper>